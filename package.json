{
  "name": "tr-064",
  "version": "0.1.0",
  "author": {
    "name": "Hendrik Westerberg",
    "email": "hendrik@gestorf.com"
  },
  "description": "TR-064 - UPnP/IGD for node.js",
  "scripts": {
    "test": "node ./testing.js"
  },
  "main": "./lib/TR064",
  "repository": {
    "type": "git",
    "url": "https://github.com/hendrikw01/tr-064.git"
  },
  "keywords": [
    "TR-064",
    "UPnP",
    "IGD",
    "Fritz.Box",
    "Router"
  ],
  "dependencies": {
    "async": "0.2.x",
    "digest-header": "0.0.1",
    "eyes": "0.1.x",
    "request": ">=2.30",
    "www-authenticate": "^0.6.2",
    "xml2js": "0.4.x"
  },
  "analyze": false,
  "license": "Apache License",
  "engines": {
    "node": ">=0.10"
  },
  "readme": "tr-064\n======\n\nTR-064 - UPnP/IGD for node.js\n\n## Description\n\nA library to interact with routers and other network devices.\nTested and designd for Fritz.Box routers.\n\nThis library is capable of:\n* Supports the UPnP and IGD Protocol\n* Read and configure Services\n* Subscribe to Events with included EventServer\n\nMore info about TR-064: http://www.avm.de/de/Extern/files/tr-064/AVM_TR-064_first_steps.pdf\n\n## Install\n\n<pre>\n  npm install tr-064\n</pre>\n\n## It`s simple\n\nConnect to the device and read a Service.\n\n```javascript\nvar tr = require(\"tr-064\");\nvar tr064 = new tr.TR064();\ntr064.initTR064Device(\"fritz.box\", 49000, function (err, device) {\n    if (!err) {\n       var wanip = device.services[\"urn:dslforum-org:service:WANIPConnection:1\"];\n       wanip.actions.GetInfo(function(err, result){\n       \t\tconsole.log(result);\n       });\n    }\n});\n\n```\n\n## List All Services and Variables\n\nGet the info from both protocols.\n\n```javascript\nvar tr = require(\"tr-064\");\nvar tr064 = new tr.TR064();\ntr064.initTR064Device(\"fritz.box\", 49000, function (err, device) {\n    if (!err) {\n        console.log(\"Found device! - TR-064\");\n        showDevice(device);\n    }\n});\n\ntr064.initIGDDevice(\"fritz.box\", 49000, function (err, device) {\n    if (!err) {\n        console.log(\"Found device! - IGD\");\n        showDevice(device);\n    }\n});\n\nvar showDevice = function (device) {\n    console.log(\"=== \" + device.meta.friendlyName + \" ===\");\n    device.meta.servicesInfo.forEach(function (serviceType) {\n        var service = device.services[serviceType];\n        console.log(\"  ---> \" + service.meta.serviceType + \" <---\");\n        service.meta.actionsInfo.forEach(function (action) {\n            console.log(\"   # \" + action.name + \"()\");\n            action.inArgs.forEach(function (arg) {\n                console.log(\"     IN : \" + arg);\n            });\n            action.outArgs.forEach(function (arg) {\n                console.log(\"     OUT: \" + arg);\n            });\n        });\n    });\n}\n```\n\n##\nMethods\n\n### initTR064Device(host, port, callback)\n\nInitialize the TR - 064 UPnP controller\n\n* `host` - hostname of the device \n* `port` - port of the device(standard: 49000) \n* `callback` - (err, device)\n\n### initIGDDevice(host, port, callback)\n\nInitialize the TR - 064 IGD controller\n\n* `host` - hostname of the device \n* `port` - port of the device(standard: 49000) \n* `callback` - (err, device)\n\n### device.meta\n\nArray with all info about services and actions\n\n### device.services[`Service Identifier`]\n\nGets the specified service form the device\n\n* `Service Identifier` - usually in the form of: urn:dslforum-org:service:XXX:1\n\n### service.actions.XXX([args], callback)\n* `args` - Array of args to configure or read a service.\n* `callback` - (err, result)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/hendrikw01/tr-064/issues"
  },
  "homepage": "https://github.com/hendrikw01/tr-064",
  "_id": "tr-064@0.1.0",
  "_shasum": "34beaffc5bf76089a9efa11d59d704717d759e99",
  "_resolved": "git://github.com/hendrikw01/tr-064#128d8d4e18ebe087e45045cf064bb16fb719bcba",
  "_from": "git://github.com/hendrikw01/tr-064",
  "_fromGithub": true
}
